// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking untukays to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id_users    String @id @default(cuid())
  email String  @unique
  name  String?
  username String @unique
  password String
  role      String
  bidang    String
  image     String?
  status    Boolean @default(true)
  posts_documents Documents[] 
  posts_photos Photos[] 
  posts_videos Videos[] 
  posts_session Session?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Documents {
  id_documents Int     @id @default(autoincrement())
  nomor     String?
  judul     String @db.LongText
  tipe_dokumen String?
  dokumen   String?
  bidang    String
  singkatan String?
  tahun     String
  bahasa    String?
  tempat_penetapan String
  sumber    String?
  lokasi    String
  file      String
  published Boolean @default(false)
  author    User?    @relation(fields: [authorId], references: [id_users], onDelete: Cascade)
  authorId  String?
  authorUsername String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Photos {
  id_photos Int @id @default(autoincrement())
  judul     String @db.LongText
  tipe      String
  deskripsi String @db.LongText
  bidang    String
  tanggal   String
  file      String
  published Boolean @default(false)
  author    User?    @relation(fields: [authorId], references: [id_users], onDelete: Cascade)
  authorId  String?
  authorUsername String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pegawai {
  id_pegawai Int @id @default(autoincrement())
  name      String
  jabatan   String?
  nip       String?
  golongan  String?
  pendidikan_terahir   String?
  email     String?
  bidang    String?
  image     String?
  status    String?
  authorId  String?
  authorUsername String?
  published Boolean @default(false)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
}

model Videos {
  id_videos Int @id @default(autoincrement())
  judul     String @db.LongText
  tipe      String
  deskripsi String @db.LongText
  bidang    String
  tanggal   String
  file      String
  published Boolean @default(false)
  author    User?    @relation(fields: [authorId], references: [id_users], onDelete: Cascade)
  authorId  String?
  authorUsername String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id_session Int @id @default(autoincrement())
  login_session      DateTime @default(now())
  expire_session     DateTime 
  role               String 
  username           String
  email              String
  refresh_session    String? @db.Text
  status_login       Boolean @default(false)
  author    User @relation(fields: [authorId], references: [id_users], onDelete: Cascade)
  authorId  String @unique
}
